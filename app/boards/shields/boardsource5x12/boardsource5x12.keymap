/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
 
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#define DEFAULT 0
#define SPECIAL	1
#define NAV	2 
#define BORING 3

&lt {
	tapping-term-ms = <200>;
};


/ {
    combos {
            compatible = "zmk,combos";
            combo_OUT {
                    timeout-ms = <50>;
                    key-positions = <12 13>;
                    bindings = <&out OUT_BLE>;
            };
    };
    behaviors {

            as: auto_shift {
                    compatible = "zmk,behavior-hold-tap";
                    label = "AutoShift";
                    #binding-cells = <2>;
                    tapping-term-ms = <200>;
                    quick_tap_ms = <0>;
                    flavor = "tap-preferred";
                    bindings = <&kp>, <&kp>;
            };
    };
    keymap {
            compatible = "zmk,keymap";

            default_layer {
                    bindings = <
                            &as LS(GRAV) GRAV		&as LS(N1) N1	&as LS(N2) N2		&as LS(N3) N3		&as LS(N4) N4	&as LS(N5) N5	&as LS(N6) N6	&as LS(N7) N7	&as LS(N8) N8		&as LS(N9) N9		&as LS(N0) N0		&as LS(MINUS) MINUS
                            &kp TAB					&kp Q			&kp W				&kp E				&kp R			&kp T			&kp Y			&kp U			&kp I				&kp O				&kp P				&as LS(EQL) EQL
                            &as LC(LS(LALT)) ESC	&kp A			&kp S				&kp D				&kp F			&kp G			&kp H			&kp J			&kp K				&kp L				&as LS(SEMI) SEMI	&as LS(SQT) SQT
                            &kp LSHIFT				&kp Z			&kp X				&kp C				&kp V			&kp B			&kp N			&kp M			&as LS(COMMA) COMMA	&as LS(DOT) DOT 	&as LS(FSLH) FSLH	&kp RSHIFT
                            &kp LCTRL				&kp LALT		&as LS(LBKT) LBKT	&as LS(RBKT) RBKT 	&mo NAV 		&mt LGUI BSPC	&kp SPACE		&mo SPECIAL 	&as LS(LBKT) LBKT	&as LS(RBKT) RBKT	&kp BSLH			&kp RET
                            >;
                    };

            SPECIAL {
                    bindings = <
                            &out OUT_TOG	&bt BT_SEL 1		&bt BT_SEL 2	&bt BT_SEL 3	&bt BT_SEL 4	&kp KP_NUMLOCK	&none		&none		&none		&none	 	&bt BT_CLR		&kp KP_NUMLOCK
                            &kp LC(TAB)		&kp LS(LC(TAB))		&kp N7			&kp N8			&kp N9			&kp ASTRK		&kp ASTRK	&kp N7		&kp N8		&kp N9		&none			&kp F12
                            &kp LG(GRAV)	&kp LG(LS(GRAV)) 	&kp N4			&kp N5			&kp N6			&kp PLUS		&kp PLUS	&kp N4		&kp N5		&kp N6		&none			&kp RET
                            &kp LSHIFT		&none				&kp N1			&kp N2			&kp N3			&kp MINUS		&kp MINUS	&kp N1		&kp N2		&kp N3		&none			&kp RSHIFT
                            &out OUT_BLE	&out OUT_USB		&kp RET			&kp N0			&kp DOT			&kp LA(BSPC)			&none		&none		&kp N0		&kp DOT		&tog BORING		&none
                            >;
                    };
            NAV {
                    bindings = <
                            &kp LC(GRAV)	&kp F1			&kp F2			&kp F3		&kp F4		&kp F5			&kp F6		&kp F7		&kp F8		&kp F9		&kp F10		&kp F11
                            &kp LC(TAB)		&kp LA(BSPC)	&kp PG_UP		&kp UP		&kp RET		&kp LA(DEL)		&none		&none		&none		&kp LBKT	&kp RBKT	&kp F12
                            &none			&kp LA(LEFT)	&kp LEFT		&kp DOWN	&kp RIGHT	&kp LA(RIGHT)	&none		&none		&none		&kp LBRC	&kp RBRC	&kp RET
                            &kp LSHIFT 		&kp HOME		&kp PG_DN		&kp LG(RET)	&kp SPACE	&kp END			&none		&none		&none		&none		&kp BSLH	&kp RET
                            &kp RCTRL		&kp LALT		&none 			&none 		&none		&kp LGUI    	&kp SPACE	&none		&kp LEFT	&kp DOWN	&kp UP		&kp RIGHT
]								>;
                    };

            BORING {
                    bindings = <
                            &as LS(GRAV) GRAV		&as LS(N1) N1	&as LS(N2) N2		&as LS(N3) N3		&as LS(N4) N4	&as LS(N5) N5	&as LS(N6) N6	&as LS(N7) N7	&as LS(N8) N8		&as LS(N9) N9		&as LS(N0) N0		&as LS(MINUS) MINUS
                            &kp TAB					&kp Q			&kp W				&kp E				&kp R			&kp T			&kp Y			&kp U			&kp I				&kp O				&kp P				&as LS(EQL) EQL
                            &kp ESC					&kp A			&kp S				&kp D				&kp F			&kp G			&kp H			&kp J			&kp K				&kp L				&as LS(SEMI) SEMI	&as LS(SQT) SQT
                            &kp LSHIFT				&kp Z			&kp X				&kp C				&kp V			&kp B			&kp N			&kp M			&as LS(COMMA) COMMA	&as LS(DOT) DOT 	&as LS(FSLH) FSLH	&kp RSHIFT
                            &kp LCTRL				&kp LALT		&as LS(LBKT) LBKT	&as LS(RBKT) RBKT 	&kp LGUI		&kp BSPC		&kp SPACE		&kp RET			&as LS(LBKT) LBKT	&as LS(RBKT) RBKT	&kp BSLH			&tog BORING
                            >;
                    };

    };
};	