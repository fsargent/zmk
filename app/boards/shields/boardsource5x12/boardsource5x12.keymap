/*
 * 0	1	2	3	4	5		6	7	8	9	10	11
 * 12	13	14	15	16	17		18	19	20	21	22	23
 * 24	25	26	27	28	29		30	31	32	33	34	35
 * 36	37	38	39	40	41		42	43	44	45	46	47
 * 48	49	50	51	52	53		54	55	56	57	58	59
 * 
 * 0	1	2	3	4		5	6	7	8	9	
 * 10	11	12	13	14		15	16	17	18	19	
 * 20	21	22	23	24		25	26	27	28	29	
 * 			30	31		32	33
 * 
 * Copyright (c) 2021 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define NAV_L 1
#define OTH_L 2
#define NUM_L 3
#define SYM_L 4
#define MED_L 5
#define FUN_L 6

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
	&lt { quick_tap_ms = <200>; }; 
/ {
    combos  {
 	compatible="zmk,combos";

 	bt_mo {
 		timeout-ms=<50>;
 		key-positions=<53 54>;
 		bindings=<&mo OTH_L>;
 	}
 	;

 	med_mo {
 		timeout-ms=<50>;
 		key-positions=<52 53>;
 		bindings=<&mo MED_L>;
 	}

 	;

 	fn_mo {
 		timeout-ms=<50>;
 		key-positions=<54 55>;
 		bindings=<&mo FUN_L>;
 	}

 	;

 	combo_one {
 		timeout-ms=<50>;
 		key-positions=<12 24>;
 		bindings=<&kp N1>;
 	}

 	;

 	combo_two {
 		timeout-ms=<50>;
 		key-positions=<13 25>;
 		bindings=<&kp N2>;
 	}

 	;

 	combo_three {
 		timeout-ms=<50>;
 		key-positions=<14 26>;
 		bindings=<&kp N3>;
 	}

 	;

 	combo_four {
 		timeout-ms=<50>;
 		key-positions=<15 27>;
 		bindings=<&kp N4>;
 	}

 	;

 	combo_five {
 		timeout-ms=<50>;
 		key-positions=<16 28>;
 		bindings=<&kp N5>;
 	}

 	;

 	combo_six {
 		timeout-ms=<50>;
 		key-positions=<19 31>;
 		bindings=<&kp N6>;
 	}
 	;

 	combo_seven {
 		timeout-ms=<50>;
 		key-positions=<20 32>;
 		bindings=<&kp N7>;
 	}

 	;

 	combo_eight {
 		timeout-ms=<50>;
 		key-positions=<21 33>;
 		bindings=<&kp N8>;
 	}

 	;

 	combo_nine {
 		timeout-ms=<50>;
 		key-positions=<22 34>;
 		bindings=<&kp N9>;
 	}

 	;

 	combo_zero {
 		timeout-ms=<50>;
 		key-positions=<23 35>;
 		bindings=<&kp N0>;
 	}

 	;

	combo_tab {
		timeout-ms=<25>;
		key-positions=<12 13>;
		bindings=<&kp TAB>;
	};
	combo_tab2 {
		timeout-ms=<25>;
		key-positions=<34 35>;
		bindings=<&kp TAB>;
	};

		combo_stab2 {
		timeout-ms=<25>;
		key-positions=<32 33>;
		bindings=<&kp LS(TAB)>;
	};

	combo_esc {
		timeout-ms=<25>;
		key-positions=<24 25 26 27>;
		bindings=<&kp ESC>;
	};

	combo_caps{
		timeout-ms=<25>;
		key-positions=<36 37 38 39>;
		bindings=<&kp CAPS>;
	};

	combo_undo{timeout-ms=<25>;
		key-positions=<44 45>;
		bindings=<&kp LG(Z)>;
	};

	combo_redo{timeout-ms=<25>;
		key-positions=<46 47>;
		bindings=<&kp LS(LG(Z))>;
	};

	combo_cut{
		timeout-ms=<25>;
		key-positions=<36 37>;
		bindings=<&kp LG(X)>;
	};combo_copy{
		timeout-ms=<25>;
		key-positions=<37 38>;
		bindings=<&kp LG(C)>;
	};combo_paste{
		timeout-ms=<25>;
		key-positions=<38 39>;
		bindings=<&kp LG(V)>;
	};
 };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <	&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
	&none		&none		&none		&none		&none		&none		&none		&none		&none		&none		&none		&none	
	&kp Q		&kp W		&kp E		&kp R		&kp T		&none		&none		&kp Y		&kp U		&kp I		&kp O		&kp P
	&hm LALT A	&hm LCTRL S	&hm LGUI D	&hm LSHFT F	&kp G		&none		&none		&kp H		&hm RSHFT J	&hm RGUI K	&hm RCTRL L	&hm RALT QUOT
	&kp Z		&kp X		&kp C		&kp V		&kp B		&none		&none		&kp N		&kp M		&kp COMMA	&kp DOT		&kp FSLH
	&none		&none		&none		&none		&lt NAV_L TAB	&hm LGUI BKSP	&lt NUM_L SPACE	&lt SYM_L RET	&none		&none		&none		&none
                    >;

	};

        nav_layer {
            label = "Nav";
            bindings = <
	&none		&none		&none		&none		&none			&none	&none	&none		&none		&none		&none		&none	
	&kp LA(BSPC)	&kp LG(Z)	&kp UP		&kp LG(LS(Z))	&kp LA(DEL)		&none	&none	&trans		&kp LA(BSPC)	&kp LS(LG(TAB))	&kp LG(TAB)	&trans
	&kp LA(LEFT)	&kp LEFT	&kp DOWN	&kp RIGHT	&kp LA(RIGHT)		&none	&none	&kp LA(LEFT)	&kp LG(LBKT)	&kp LS(LG(TILDE)) &kp LG(TILDE) &kp LG(RBKT)
	&kp LG(LEFT)	&kp LS(LA(LEFT)) &kp RET	&kp LS(LA(RIGHT)) &kp LG(RIGHT)		&none	&none	&trans		&kp HOME	&kp LS(LC(TAB))	&kp LC(TAB)	&kp END
	&none		&none		&none		&none		&trans			&trans	&kp ESC	&kp DEL		&none		&none		&none		&none
            >;
        };

        other_layer {
            label = "Other";
            bindings = <
	&none		&none		&none		&none		&none		&none	&none	&none		&none		&none		&none		&none
	&bt BT_SEL 0	&bt BT_SEL 1	&bt BT_SEL 2	&bt BT_SEL 3	&bt BT_SEL 4	&none	&none	&none		&none		&none		&none		&none
	&trans		&trans		&trans		&trans		&bt BT_PRV	&none	&none	&bt BT_NXT	&trans		&trans		&trans		&trans
	&bt BT_CLR	&trans		&trans		&trans		&out OUT_BLE	&none	&none	&bt BT_SEL 0	&bt BT_SEL 1	&bt BT_SEL 2	&bt BT_SEL 3	&bt BT_SEL 4
	&none		&none		&none		&none		&trans		&trans	&trans	&trans		&none		&none		&none		&none
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
		&none		&none		&none		&none	&none	&none		&none	&none	&none	&none		&none		&none	
		&kp N1		&kp N2		&kp N3		&kp N4	&kp N5	&none		&none	&kp N6	&kp N7	&kp N8		&kp N9		&kp N0
		&hm LALT TAB	&hm LCTRL LBKT	&hm LGUI RBKT	&trans	&trans	&none		&none	&trans	&trans	&hm RGUI LBKT	&hm RCTRL RBKT	&hm RALT SEMI
		&kp GRAVE	&kp MINUS	&kp EQUAL	&trans	&trans	&none		&none	&trans	&trans	&kp MINUS	&kp EQUAL	&kp BSLH
		&none		&none		&none		&none	&kp DEL	&kp BKSP	&trans	&trans	&none	&none		&none		&none	
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <	
		&none		 &none			&none			&none		&none		&none		&none		&none		&none		&none		 	&none			&none	
		&kp LS(N1)	 &kp LS(N2)		&kp LS(N3)		&kp LS(N4)	&kp LS(N5)	&none		&none		&kp LS(N6)	&kp LS(N7)	&kp LS(N8)		&kp LS(N9)		&kp LS(N0)
		&hm LALT LS(TAB) &hm LCTRL LS(LBKT)	&hm LGUI LS(RBKT)	&trans		&trans		&none		&none		&trans		&trans		&hm RGUI LS(LBKT)	&hm RCTRL LS(RBKT)	&hm RALT LS(SEMI)
		&kp LS(GRAVE)	 &kp LS(MINUS)		&kp LS(EQUAL)		&none		&none		&none		&none		&trans		&trans		&kp LS(MINUS)		&kp LS(EQUAL)		&kp LS(BSLH)
		&none		 &none			&none			&none		&kp DEL		&kp BKSP	&none		&none		&none		&trans			&trans 			&none
            >;
        };

        media_layer {
            label = "Media";
            bindings = <
	&none	&none	&none	&none	&none	&none	&none		&none			&none		&none		&none		&none	
	&trans	&trans	&trans	&trans	&trans	&none	&none		&trans			&trans		&trans		&trans		&trans
	&trans	&trans	&trans	&trans	&trans	&none	&none		&trans			&kp C_PREV	&kp C_VOL_DN	&kp C_VOL_UP	&kp C_NEXT
	&trans	&trans	&trans	&trans	&trans	&none	&none		&trans			&trans		&trans		&trans		&trans
	&none	&none	&none	&none	&trans	&trans	&kp C_STOP	&kp C_PLAY_PAUSE 	&none		&none		&none		&none	
            >;
        };

        fun_layer {
            label = "Fun";
            bindings = <
	    	&none	&none		&none		&none	&none	&none	&none	&none	&none	&none	&none	&none	
		&kp F1	&kp F2		&kp F3  	&kp F4	&kp F5	&none	&none	&kp F6 	&kp F7	&kp F8	&kp F9	&kp F10		
		&kp F11	&kp F12		&trans		&trans	&trans	&none	&none	&trans	&trans	&trans	&trans	&trans
		&kp SLCK&kp PSCRN	&kp PAUSE_BREAK &trans	&trans	&none	&none	&trans	&trans	&trans	&trans	&trans
		&none	&none		&none		&none	&none	&none	&trans	&trans  &none	&none	&none	&none	
            >;
        };
    };
};

